[
    {
      "id": 1,
      "title": "Основи квантового програмування",
      "description": "Фундаментальні концепції квантових обчислень у Node.js",
      "content": "<p><strong>Квантове програмування</strong> - це парадигма розробки, що використовує принципи квантової механіки для обчислень. <strong>Квантовий біт (кубіт)</strong> - це базова одиниця квантової інформації, яка може перебувати в суперпозиції станів.</p><p>Основні принципи:</p><ul><li><strong>Суперпозиція</strong> - здатність кубіта перебувати одночасно в декількох станах</li><li><strong>Квантова заплутаність</strong> - взаємозалежність станів кубітів</li><li><strong>Квантовий паралелізм</strong> - можливість одночасної обробки множини станів</li></ul><p>У цьому уроці ми вивчимо, як ці принципи застосовуються в Node.js для створення надпотужних обчислювальних систем майбутнього.</p>",
      "example": "const quantum = require('quantum-node');\n\n// Створення системи кубітів\nconst qubits = quantum.createQubits(3);\n\n// Застосування квантового перетворення\nqubits.applyHadamard();\nqubits.entangle(0, 1);\n\n// Вимірювання результ ату\nconst result = qubits.measure();\nconsole.log(`Квантовий стан системи: ${result}`);",
      "test": {
        "questions": [
          {
            "question": "Що таке кубіт?",
            "options": [
              "Одиниця класичної інформації",
              "Базова одиниця квантової інформації",
              "Тип квантового комп'ютера",
              "Метод шифрування даних"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Що означає принцип суперпозиції в квантовому програмуванні?",
            "options": [
              "Здатність кубіта перебувати одночасно в декількох станах",
              "Можливість створювати багато кубітів одночасно",
              "Метод об'єднання класичних і квантових обчислень",
              "Спосіб зберігання даних у квантовій пам'яті"
            ],
            "correctAnswer": 0
          },
          {
            "question": "Що таке квантова заплутаність?",
            "options": [
              "Метод шифрування квантових даних",
              "Проблема в квантових обчисленнях",
              "Взаємозалежність станів кубітів",
              "Спосіб вимірювання квантових станів"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Яка основна перевага квантового паралелізму?",
            "options": [
              "Зменшення енергоспоживання квантового комп'ютера",
              "Можливість одночасної обробки множини станів",
              "Збільшення швидкості класичних обчислень",
              "Покращення безпеки квантових комунікацій"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Яка функція використовується для створення системи кубітів у наведеному прикладі?",
            "options": [
              "quantum.createQubits()",
              "quantum.initializeQubits()",
              "quantum.setupQuantumSystem()",
              "quantum.newQubits()"
            ],
            "correctAnswer": 0
          },
          {
            "question": "Яке квантове перетворення застосовується до кубітів у прикладі?",
            "options": [
              "Перетворення Фур'є",
              "Квантове вентилювання",
              "Перетворення Адамара",
              "Квантова декогеренція"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Що означає функція entangle() у наведеному прикладі?",
            "options": [
              "Розділення кубітів",
              "Створення квантової заплутаності між кубітами",
              "Вимірювання стану кубітів",
              "Скидання стану кубітів"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Яка функція використовується для отримання результату вимірювання квантової системи?",
            "options": [
              "qubits.getResult()",
              "qubits.calculate()",
              "qubits.measure()",
              "qubits.readState()"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Яке основне застосування квантового програмування в Node.js?",
            "options": [
              "Покращення швидкодії веб-серверів",
              "Створення квантових баз даних",
              "Розробка квантових алгоритмів для складних обчислень",
              "Оптимізація роботи з файловою системою"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Що означає термін 'декогеренція' в контексті квантових обчислень?",
            "options": [
              "Процес створення кубітів",
              "Втрата квантових властивостей системи через взаємодію з навколишнім середовищем",
              "Метод квантового шифрування",
              "Спосіб збільшення кількості кубітів у системі"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Яка основна відмінність між класичним бітом і кубітом?",
            "options": [
              "Кубіт може зберігати більше інформації",
              "Кубіт працює швидше",
              "Кубіт може перебувати в суперпозиції станів",
              "Кубіт використовується тільки в квантових комп'ютерах"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Що таке квантовий алгоритм?",
            "options": [
              "Алгоритм, що працює тільки на суперкомп'ютерах",
              "Метод шифрування даних",
              "Послідовність інструкцій для розв'язання задачі на квантовому комп'ютері",
              "Спосіб оптимізації класичних алгоритмів"
            ],
            "correctAnswer": 2
          }
        ]
      }
    },
    {
      "id": 2,
      "title": "Нейромережеві мікросервіси",
      "description": "Створення масштабованих мікросервісів з використанням нейронних мереж",
      "content": "<p><strong>Нейромережевий мікросервіс</strong> - це автономний сервіс, що використовує штучні нейронні мережі для обробки даних та прийняття рішень.</p><p>Ключові компоненти:</p><ul><li><strong>Шари нейронної мережі</strong> - структурні елементи для обробки даних</li><li><strong>Функції активації</strong> - математичні функції для перетворення сигналів</li><li><strong>Ваги та зміщення</strong> - параметри, що налаштовуються під час навчання</li></ul><p>Ми розглянемо архітектуру нейромережевих мікросервісів та їх взаємодію в розподілених системах.</p>",
      "example": "const tf = require('@tensorflow/tfjs-node');\nconst express = require('express');\n\nconst app = express();\n\n// Створення глибокої нейронної мережі\nconst model = tf.sequential();\nmodel.add(tf.layers.dense({units: 128, activation: 'relu', inputShape: [10]}));\nmodel.add(tf.layers.dropout(0.2));\nmodel.add(tf.layers.dense({units: 64, activation: 'relu'}));\nmodel.add(tf.layers.dense({units: 1, activation: 'sigmoid'}));\n\nmodel.compile({optimizer: 'adam', loss: 'binaryCrossentropy'});\n\napp.post('/predict', async (req, res) => {\n  const input = tf.tensor2d([req.body.data]);\n  const prediction = await model.predict(input).data();\n  res.json({prediction: prediction[0]});\n});\n\napp.listen(3000, () => console.log('Нейромережевий мікросервіс активовано'));",
      "test": {
        "questions": [
          {
            "question": "Що таке нейромережевий мікросервіс?",
            "options": [
              "Великий монолітний додаток",
              "Автономний сервіс, що використовує штучні нейронні мережі",
              "База даних для зберігання нейронних мереж",
              "Інструмент для візуалізації нейронних мереж"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Яка бібліотека використовується для створення нейронної мережі в прикладі?",
            "options": [
              "PyTorch",
              "Keras",
              "TensorFlow.js",
              "Scikit-learn"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Яка архітектура нейронної мережі використовується в прикладі?",
            "options": [
              "Рекурентна нейронна мережа",
              "Згорткова нейронна мережа",
              "Глибока нейронна мережа",
              "Автоенкодер"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Яка функція активації використовується в прихованих шарах мережі?",
            "options": [
              "Sigmoid",
              "ReLU",
              "Tanh",
              "Softmax"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Яка функція активації використовується у вихідному шарі мережі?",
            "options": [
              "ReLU",
              "Tanh",
              "Sigmoid",
              "Softmax"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Який оптимізатор використовується для навчання мережі?",
            "options": [
              "SGD",
              "RMSprop",
              "Adam",
              "Adagrad"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Яка функція втрат використовується для навчання мережі?",
            "options": [
              "Mean Squared Error",
              "Categorical Crossentropy",
              "Binary Crossentropy",
              "Hinge Loss"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Який веб-фреймворк використовується для створення мікросервісу?",
            "options": [
              "Flask",
              "Django",
              "Express",
              "FastAPI"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Яка кількість нейронів у першому прихованому шарі мережі?",
            "options": [
              "64",
              "128",
              "256",
              "512"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Що таке dropout і для чого він використовується в нейронній мережі?",
            "options": [
              "Метод ініціалізації ваг",
              "Техніка регуляризації для запобігання перенавчання",
              "Функція активації",
              "Метод оптимізації градієнтного спуску"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Яка розмірність вхідних даних для нейронної мережі в прикладі?",
            "options": [
              "5",
              "10",
              "64",
              "128"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Який HTTP метод використовується для отримання прогнозу від мікросервісу?",
            "options": [
              "GET",
              "POST",
              "PUT",
              "DELETE"
            ],
            "correctAnswer": 1
          }
        ]
      }
    },
    {
      "id": 3,
      "title": "Квантова теорія інформації",
      "description": "Основи квантової теорії інформації та її застосування в Node.js",
      "content": "<p><strong>Квантова теорія інформації</strong> - це галузь науки, що вивчає закони передачі та обробки інформації на квантовому рівні.</p><p>Основні концепції:</p><ul><li><strong>Квантова ентропія</strong> - міра невизначеності квантової системи</li><li><strong>Квантові канали зв'язку</strong> - середовище передачі квантової інформації</li><li><strong>Квантова телепортація</strong> - миттєва передача квантового стану</li></ul><p>Ми вивчимо, як ці концепції можна реалізувати в Node.js для створення надійних та швидких систем обміну даними.</p>",
      "example": "const quantumInfo = require('quantum-info');\n\n// Створення квантового стану\nconst qubit = quantumInfo.createQubit();\n\n// Застосування квантового перетворення\nqubit.applyHadamard();\n\n// Обчислення квантової ентропії\nconst entropy = quantumInfo.calculateEntropy(qubit);\nconsole.log(`Квантова ентропія: ${entropy}`);\n\n// Симуляція квантової телепортації\nconst teleportedQubit = quantumInfo.teleport(qubit);\nconsole.log(`Телепортований стан: ${teleportedQubit.measure()}`);\n",
      "test": {
        "questions": [
          {
            "question": "Що вивчає квантова теорія інформації?",
            "options": [
              "Класичні методи передачі даних",
              "Закони передачі та обробки інформації на квантовому рівні",
              "Алгоритми машинного навчання",
              "Методи шифрування даних"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Що таке квантова ентропія?",
            "options": [
              "Міра енергії квантової системи",
              "Швидкість передачі квантової інформації",
              "Міра невизначеності квантової системи",
              "Кількість кубітів у системі"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Що таке квантові канали зв'язку?",
            "options": [
              "Фізичні кабелі для передачі квантової інформації",
              "Математичні моделі квантових систем",
              "Середовище передачі квантової інформації",
              "Алгоритми квантового шифрування"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Що таке квантова телепортація?",
            "options": [
              "Фізичне переміщення квантових частинок",
              "Миттєва передача квантового стану",
              "Метод квантового шифрування",
              "Спосіб зберігання квантової інформації"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Яка функція використовується для створення кубіта в прикладі?",
            "options": [
              "quantumInfo.newQubit()",
              "quantumInfo.initQubit()",
              "quantumInfo.createQubit()",
              "quantumInfo.setupQubit()"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Яке квантове перетворення застосовується до кубіта в прикладі?",
            "options": [
              "Перетворення Фур'є",
              "Перетворення Адамара",
              "Квантове вентилювання",
              "Квантова декогеренція"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Яка функція використовується для обчислення квантової ентропії?",
            "options": [
              "quantumInfo.entropy()",
              "quantumInfo.calculateEntropy()",
              "quantumInfo.getEntropy()",
              "quantumInfo.measureEntropy()"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Яка функція використовується для симуляції квантової телепортації?",
            "options": [
              "quantumInfo.teleport()",
              "quantumInfo.transfer()",
              "quantumInfo.send()",
              "quantumInfo.transmit()"
            ],
            "correctAnswer": 0
          },
          {
            "question": "Що повертає функція measure() для телепортованого кубіта?",
            "options": [
              "Квантовий стан",
              "Ентропію",
              "Ймовірність",
              "Енергію"
            ],
            "correctAnswer": 0
          },
          {
            "question": "Яке основне застосування квантової теорії інформації в Node.js?",
            "options": [
              "Покращення швидкодії веб-серверів",
              "Створення квантових баз даних",
              "Розробка надійних та швидких систем обміну даними",
              "Оптимізація роботи з файловою системою"
            ],
            "correctAnswer": 2
          },
          {
            "question": "Що таке квантова суперпозиція?",
            "options": [
              "Метод шифрування квантових даних",
              "Здатність кубіта перебувати одночасно в декількох станах",
              "Спосіб зберігання квантової інформації",
              "Техніка квантової телепортації"
            ],
            "correctAnswer": 1
          },
          {
            "question": "Яка основна перевага використання квантової теорії інформації в криптографії?",
            "options": [
              "Збільшення швидкості шифрування",
              "Зменшення розміру ключів",
              "Теоретично непорушна безпека",
              "Спрощення алгоритмів шифрування"
            ],
            "correctAnswer": 2
          }
        ]
      }
    }
  ]